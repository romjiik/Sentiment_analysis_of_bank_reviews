{"metadata":{"accelerator":"GPU","colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyNUB9Dc4TpWaVH9xU+jFwZ4","include_colab_link":true},"gpuClass":"standard","kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"widgets":{"application/vnd.jupyter.widget-state+json":{"4ee2d8ab0b144552b20f8939195fa0bb":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_75b07fe9d7454d55b6356599736b5869","IPY_MODEL_30a5190e12414f17bea7efa46d45afd4","IPY_MODEL_1bd431a4d44446fb8589a69ce87c2b17"],"layout":"IPY_MODEL_7dce9d76acce449e9b2ddd3224b4fa6b"}},"75b07fe9d7454d55b6356599736b5869":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_69a4af58232e4596a7e782a6a7038771","placeholder":"​","style":"IPY_MODEL_df21d39a78dd4247b77b8c6f6bd8cc1b","value":"100%"}},"30a5190e12414f17bea7efa46d45afd4":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_a35c40a847244753a5a6de6c6e4fe6e8","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_29b47a6d54fd43e0bb020b0fa00fa26d","value":1}},"1bd431a4d44446fb8589a69ce87c2b17":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4c773d81362744e1b7a358a6a10aa85c","placeholder":"​","style":"IPY_MODEL_11e67af6bca247e1804947669a24a3a4","value":" 1/1 [01:30&lt;00:00, 90.40s/it]"}},"7dce9d76acce449e9b2ddd3224b4fa6b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"69a4af58232e4596a7e782a6a7038771":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"df21d39a78dd4247b77b8c6f6bd8cc1b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a35c40a847244753a5a6de6c6e4fe6e8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"29b47a6d54fd43e0bb020b0fa00fa26d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"4c773d81362744e1b7a358a6a10aa85c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"11e67af6bca247e1804947669a24a3a4":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3b6e448523654430b56af8f12fe5a325":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ee9b8f9684c14ec18ea917de9df29ae5","IPY_MODEL_f1d77621eb854f5e9b95a0fb2b2eb76b","IPY_MODEL_607dab97b70945319576f4a9b4a5035e"],"layout":"IPY_MODEL_9183ef29621a4c77b1e6c320213f464e"}},"ee9b8f9684c14ec18ea917de9df29ae5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9c698c4b197748f1996ed8508bd77e08","placeholder":"​","style":"IPY_MODEL_14bb72b8a3f941e38704136d6b91783c","value":"100%"}},"f1d77621eb854f5e9b95a0fb2b2eb76b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_338b387e7542479c8fc069c416767c7e","max":432,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ff7501d9df514707aefaa65ebd6302b7","value":432}},"607dab97b70945319576f4a9b4a5035e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cc1d833d115744eaa7077c1685179d46","placeholder":"​","style":"IPY_MODEL_1262f734447d43ce85ac1405b5426440","value":" 432/432 [01:20&lt;00:00,  5.26it/s]"}},"9183ef29621a4c77b1e6c320213f464e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9c698c4b197748f1996ed8508bd77e08":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"14bb72b8a3f941e38704136d6b91783c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"338b387e7542479c8fc069c416767c7e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ff7501d9df514707aefaa65ebd6302b7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"cc1d833d115744eaa7077c1685179d46":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1262f734447d43ce85ac1405b5426440":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a03555727b794a84adb3a5b07704dfb8":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a2dc8e47b8f54a39b963945a2bf834f7","IPY_MODEL_ccdab01e699d45c1bd6810228e94949a","IPY_MODEL_c32e7dd119184efbb805234fabddff7d"],"layout":"IPY_MODEL_bfcab00ef22347518b62072da8c8006a"}},"a2dc8e47b8f54a39b963945a2bf834f7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0bade0a671214a9ea4a0a1daa6061e4b","placeholder":"​","style":"IPY_MODEL_165040e0d4364b6caf2f7af0c3a3683b","value":"100%"}},"ccdab01e699d45c1bd6810228e94949a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_cb0160c6801440a4bfa3e607bd02845b","max":108,"min":0,"orientation":"horizontal","style":"IPY_MODEL_26ffb3b56e474d818ef8f38706f0120b","value":108}},"c32e7dd119184efbb805234fabddff7d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e707799ef6324ad1bf04f07a84b5c7fb","placeholder":"​","style":"IPY_MODEL_9d038fd98ad542e681b5267c0427f90e","value":" 108/108 [00:09&lt;00:00, 11.09it/s]"}},"bfcab00ef22347518b62072da8c8006a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0bade0a671214a9ea4a0a1daa6061e4b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"165040e0d4364b6caf2f7af0c3a3683b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"cb0160c6801440a4bfa3e607bd02845b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"26ffb3b56e474d818ef8f38706f0120b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e707799ef6324ad1bf04f07a84b5c7fb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9d038fd98ad542e681b5267c0427f90e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"200d0a99a0144778a1cc5b258e1664d6":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_f5ebc71ea724426aa5c72922fafddd45","IPY_MODEL_3477a24a347e4e6fbbd5f3d0c8dc8665"],"layout":"IPY_MODEL_46dcb6167d674379949960af017f33ed"}},"f5ebc71ea724426aa5c72922fafddd45":{"model_module":"@jupyter-widgets/controls","model_name":"LabelModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"LabelModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"LabelView","description":"","description_tooltip":null,"layout":"IPY_MODEL_de4f60c359b948ddb55a0821d2a56d17","placeholder":"​","style":"IPY_MODEL_36a671c29393418481477982913588c8","value":"0.002 MB of 0.003 MB uploaded (0.000 MB deduped)\r"}},"3477a24a347e4e6fbbd5f3d0c8dc8665":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_ecef023b6ab441c4aeeaee168973af3f","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_2754924fcff143da954bf12e279bf71a","value":0.9037472446730346}},"46dcb6167d674379949960af017f33ed":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"de4f60c359b948ddb55a0821d2a56d17":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"36a671c29393418481477982913588c8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ecef023b6ab441c4aeeaee168973af3f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2754924fcff143da954bf12e279bf71a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}}}}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<a href=\"https://colab.research.google.com/github/romjiik/Course_work/blob/main/BERT.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>","metadata":{"id":"view-in-github","colab_type":"text"}},{"cell_type":"markdown","source":" # BEST BERT","metadata":{"id":"ZPaG_iFu8KFh"}},{"cell_type":"code","source":"from google.colab import drive\ndrive.mount('/content/drive')","metadata":{"id":"gIsAGrVh_HmF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4e380026-1ed9-4414-cfd9-fbb5a6a06d38"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":"Mounted at /content/drive\n"}]},{"cell_type":"code","source":"!pip3 install transformers","metadata":{"id":"QVJqFiIx_TUF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a5b019db-05a7-4880-bbab-3c42620d2c08","execution":{"iopub.status.busy":"2023-06-25T10:16:25.103669Z","iopub.execute_input":"2023-06-25T10:16:25.104162Z","iopub.status.idle":"2023-06-25T10:16:39.139626Z","shell.execute_reply.started":"2023-06-25T10:16:25.104136Z","shell.execute_reply":"2023-06-25T10:16:39.138345Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.30.1)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers) (3.12.0)\nRequirement already satisfied: huggingface-hub<1.0,>=0.14.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.15.1)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (1.23.5)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (5.4.1)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2023.5.5)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers) (2.28.2)\nRequirement already satisfied: tokenizers!=0.11.3,<0.14,>=0.11.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.13.3)\nRequirement already satisfied: safetensors>=0.3.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.3.1)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers) (4.64.1)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.14.1->transformers) (2023.6.0)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.14.1->transformers) (4.5.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers) (3.0.9)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2.1.1)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.4)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (1.26.15)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2023.5.7)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"!pip install wandb -qU","metadata":{"id":"90w9cS9WdCXB","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3845750a-35e4-4fb1-f0b6-6c5c569b4e6d","execution":{"iopub.status.busy":"2023-06-25T10:16:39.142244Z","iopub.execute_input":"2023-06-25T10:16:39.142622Z","iopub.status.idle":"2023-06-25T10:16:50.695679Z","shell.execute_reply.started":"2023-06-25T10:16:39.142584Z","shell.execute_reply":"2023-06-25T10:16:50.694512Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"!pip install torcheval","metadata":{"id":"aBlJOsohQZrQ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2787fafe-af2b-4c2f-b0b0-553348d74093","execution":{"iopub.status.busy":"2023-06-25T10:16:50.698149Z","iopub.execute_input":"2023-06-25T10:16:50.698543Z","iopub.status.idle":"2023-06-25T10:17:02.354282Z","shell.execute_reply.started":"2023-06-25T10:16:50.698503Z","shell.execute_reply":"2023-06-25T10:17:02.353091Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Collecting torcheval\n  Downloading torcheval-0.0.6-py3-none-any.whl (158 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m158.4/158.4 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hCollecting torchtnt>=0.0.5 (from torcheval)\n  Downloading torchtnt-0.1.0-py3-none-any.whl (87 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m87.9/87.9 kB\u001b[0m \u001b[31m8.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torcheval) (4.5.0)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from torchtnt>=0.0.5->torcheval) (2.0.0)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torchtnt>=0.0.5->torcheval) (1.23.5)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torchtnt>=0.0.5->torcheval) (2023.6.0)\nRequirement already satisfied: tensorboard in /opt/conda/lib/python3.10/site-packages (from torchtnt>=0.0.5->torcheval) (2.12.3)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from torchtnt>=0.0.5->torcheval) (21.3)\nRequirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from torchtnt>=0.0.5->torcheval) (5.9.3)\nCollecting pyre-extensions (from torchtnt>=0.0.5->torcheval)\n  Downloading pyre_extensions-0.0.30-py3-none-any.whl (12 kB)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from torchtnt>=0.0.5->torcheval) (59.8.0)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from torchtnt>=0.0.5->torcheval) (4.64.1)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->torchtnt>=0.0.5->torcheval) (3.0.9)\nRequirement already satisfied: typing-inspect in /opt/conda/lib/python3.10/site-packages (from pyre-extensions->torchtnt>=0.0.5->torcheval) (0.9.0)\nRequirement already satisfied: absl-py>=0.4 in /opt/conda/lib/python3.10/site-packages (from tensorboard->torchtnt>=0.0.5->torcheval) (1.4.0)\nRequirement already satisfied: grpcio>=1.48.2 in /opt/conda/lib/python3.10/site-packages (from tensorboard->torchtnt>=0.0.5->torcheval) (1.51.1)\nRequirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard->torchtnt>=0.0.5->torcheval) (2.17.3)\nRequirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard->torchtnt>=0.0.5->torcheval) (1.0.0)\nRequirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard->torchtnt>=0.0.5->torcheval) (3.4.3)\nRequirement already satisfied: protobuf>=3.19.6 in /opt/conda/lib/python3.10/site-packages (from tensorboard->torchtnt>=0.0.5->torcheval) (3.20.3)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard->torchtnt>=0.0.5->torcheval) (2.28.2)\nRequirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard->torchtnt>=0.0.5->torcheval) (0.7.0)\nRequirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard->torchtnt>=0.0.5->torcheval) (2.3.6)\nRequirement already satisfied: wheel>=0.26 in /opt/conda/lib/python3.10/site-packages (from tensorboard->torchtnt>=0.0.5->torcheval) (0.40.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch->torchtnt>=0.0.5->torcheval) (3.12.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch->torchtnt>=0.0.5->torcheval) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch->torchtnt>=0.0.5->torcheval) (3.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch->torchtnt>=0.0.5->torcheval) (3.1.2)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard->torchtnt>=0.0.5->torcheval) (4.2.4)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard->torchtnt>=0.0.5->torcheval) (0.2.7)\nRequirement already satisfied: six>=1.9.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard->torchtnt>=0.0.5->torcheval) (1.16.0)\nRequirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard->torchtnt>=0.0.5->torcheval) (4.9)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard->torchtnt>=0.0.5->torcheval) (1.3.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard->torchtnt>=0.0.5->torcheval) (2.1.1)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard->torchtnt>=0.0.5->torcheval) (3.4)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard->torchtnt>=0.0.5->torcheval) (1.26.15)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard->torchtnt>=0.0.5->torcheval) (2023.5.7)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard->torchtnt>=0.0.5->torcheval) (2.1.2)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch->torchtnt>=0.0.5->torcheval) (1.3.0)\nRequirement already satisfied: mypy-extensions>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from typing-inspect->pyre-extensions->torchtnt>=0.0.5->torcheval) (1.0.0)\nRequirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard->torchtnt>=0.0.5->torcheval) (0.4.8)\nRequirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard->torchtnt>=0.0.5->torcheval) (3.2.2)\nInstalling collected packages: pyre-extensions, torchtnt, torcheval\nSuccessfully installed pyre-extensions-0.0.30 torcheval-0.0.6 torchtnt-0.1.0\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import train_test_split\nimport torch\nfrom torch import nn, optim\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","metadata":{"id":"loUCGVQLG60q","execution":{"iopub.status.busy":"2023-06-25T10:17:06.200043Z","iopub.execute_input":"2023-06-25T10:17:06.200639Z","iopub.status.idle":"2023-06-25T10:17:10.602344Z","shell.execute_reply.started":"2023-06-25T10:17:06.200603Z","shell.execute_reply":"2023-06-25T10:17:10.601296Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"def seed_everything(seed: int):\n    import random, os\n    import numpy as np\n    import torch\n\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.benchmark = True","metadata":{"id":"xnSagAbq7_3G","execution":{"iopub.status.busy":"2023-06-25T10:17:10.607551Z","iopub.execute_input":"2023-06-25T10:17:10.610248Z","iopub.status.idle":"2023-06-25T10:17:10.622407Z","shell.execute_reply.started":"2023-06-25T10:17:10.610169Z","shell.execute_reply":"2023-06-25T10:17:10.621278Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"TEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 9000 # Time in seconds for automl run\nTARGET_NAME = 'rating_value' # Target column name","metadata":{"id":"3vOHgPmTHalh","execution":{"iopub.status.busy":"2023-06-25T10:17:10.624210Z","iopub.execute_input":"2023-06-25T10:17:10.625052Z","iopub.status.idle":"2023-06-25T10:17:10.632994Z","shell.execute_reply.started":"2023-06-25T10:17:10.624944Z","shell.execute_reply":"2023-06-25T10:17:10.632025Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/bank-reviews-dataset/final_review_dataset_extended.csv')\ndf['rating_value'] = df['rating_value'] - 1","metadata":{"id":"-auZyQ1m9_d3","execution":{"iopub.status.busy":"2023-06-25T10:17:10.635816Z","iopub.execute_input":"2023-06-25T10:17:10.636491Z","iopub.status.idle":"2023-06-25T10:17:11.306077Z","shell.execute_reply.started":"2023-06-25T10:17:10.636460Z","shell.execute_reply":"2023-06-25T10:17:11.305079Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"train_data, test_data = train_test_split(df,\n                                         test_size=TEST_SIZE,\n                                         stratify=df[TARGET_NAME],\n                                         random_state=10)\n\nprint('Data splitted. Parts sizes: train_data = {}, test_data = {}'\n              .format(train_data.shape, test_data.shape))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZwXfo_VpHhBj","outputId":"31d2cd4c-1ddb-4454-b784-e8ebc291b3e5","execution":{"iopub.status.busy":"2023-06-25T10:17:11.307525Z","iopub.execute_input":"2023-06-25T10:17:11.307879Z","iopub.status.idle":"2023-06-25T10:17:11.328197Z","shell.execute_reply.started":"2023-06-25T10:17:11.307846Z","shell.execute_reply":"2023-06-25T10:17:11.327226Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Data splitted. Parts sizes: train_data = (9913, 16), test_data = (2479, 16)\n","output_type":"stream"}]},{"cell_type":"code","source":"train, valid = train_test_split(train_data,\n                                         test_size=TEST_SIZE,\n                                         stratify=train_data[TARGET_NAME],\n                                         random_state=10)\n\nprint('Data splitted. Parts sizes: train = {}, valid = {}'\n              .format(train.shape, valid.shape))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wAtaGzg3HmQY","outputId":"a20b5e02-7f67-4b5c-841d-00d2f8b13355","execution":{"iopub.status.busy":"2023-06-25T10:17:11.329451Z","iopub.execute_input":"2023-06-25T10:17:11.331572Z","iopub.status.idle":"2023-06-25T10:17:11.346388Z","shell.execute_reply.started":"2023-06-25T10:17:11.331536Z","shell.execute_reply":"2023-06-25T10:17:11.345432Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Data splitted. Parts sizes: train = (7930, 16), valid = (1983, 16)\n","output_type":"stream"}]},{"cell_type":"code","source":"import wandb\nwandb.login()","metadata":{"id":"2HEcUFBMdEay","colab":{"base_uri":"https://localhost:8080/","height":72},"outputId":"bc033728-3e3c-4eb3-cce1-5818b8c49e7d","execution":{"iopub.status.busy":"2023-06-25T10:17:12.092755Z","iopub.execute_input":"2023-06-25T10:17:12.094043Z","iopub.status.idle":"2023-06-25T10:17:24.930541Z","shell.execute_reply.started":"2023-06-25T10:17:12.094003Z","shell.execute_reply":"2023-06-25T10:17:24.929586Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Logging into wandb.ai. (Learn how to deploy a W&B server locally: https://wandb.me/wandb-server)\n\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter, or press ctrl+c to quit:","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"  ········································\n"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n","output_type":"stream"},{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"code","source":"config={\n      \"learning_rate\": 2e-5,\n      \"architecture\": \"cointegrated/LaBSE-en-ru\",\n      \"weight_balance\": False,\n      \"dataset\": \"Bank_review_dataset\",\n      \"epochs\": 3,\n      \"batch_size\": 16,\n}\n\nwandb.init(\n    # Set the project where this run will be logged\n    project=\"course_work\",\n    # We pass a run name (otherwise it’ll be randomly assigned, like sunshine-lollypop-10)\n    name=f\"LaBSE_bert BEST\",\n    # Track hyperparameters and run metadata\n    config=config)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":125},"id":"fuy9pW-ioYg5","outputId":"e4bd720a-7a7d-4a7c-a934-0336fc0facbd","execution":{"iopub.status.busy":"2023-06-25T10:18:28.868589Z","iopub.execute_input":"2023-06-25T10:18:28.869234Z","iopub.status.idle":"2023-06-25T10:18:59.779743Z","shell.execute_reply.started":"2023-06-25T10:18:28.869203Z","shell.execute_reply":"2023-06-25T10:18:59.778952Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mberdyshevrv\u001b[0m (\u001b[33mromjiik\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.15.4"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20230625_101828-6kx5wlkl</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/romjiik/course_work/runs/6kx5wlkl' target=\"_blank\">LaBSE_bert BEST</a></strong> to <a href='https://wandb.ai/romjiik/course_work' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/romjiik/course_work' target=\"_blank\">https://wandb.ai/romjiik/course_work</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/romjiik/course_work/runs/6kx5wlkl' target=\"_blank\">https://wandb.ai/romjiik/course_work/runs/6kx5wlkl</a>"},"metadata":{}},{"execution_count":11,"output_type":"execute_result","data":{"text/html":"<button onClick=\"this.nextSibling.style.display='block';this.style.display='none';\">Display W&B run</button><iframe src='https://wandb.ai/romjiik/course_work/runs/6kx5wlkl?jupyter=true' style='border:none;width:100%;height:420px;display:none;'></iframe>","text/plain":"<wandb.sdk.wandb_run.Run at 0x7d50ab822860>"},"metadata":{}}]},{"cell_type":"code","source":"import torch\nfrom torch.utils.data import Dataset\n\nclass CustomDataset(Dataset):\n\n    def __init__(self, texts, targets, tokenizer, max_len=512):\n        self.texts = texts\n        self.targets = targets\n        self.tokenizer = tokenizer\n        self.max_len = max_len\n\n    def __len__(self):\n        return len(self.texts)\n\n    def __getitem__(self, idx):\n        text = str(self.texts[idx])\n        target = self.targets[idx]\n\n        encoding = self.tokenizer.encode_plus(\n            text,\n            add_special_tokens=True,\n            max_length=self.max_len,\n            return_token_type_ids=False,\n            padding='max_length',\n            return_attention_mask=True,\n            return_tensors='pt',\n            truncation=True\n        )\n\n        return {\n          'text': text,\n          'input_ids': encoding['input_ids'].flatten(),\n          'attention_mask': encoding['attention_mask'].flatten(),\n          'targets': torch.tensor(target, dtype=torch.long)\n        }","metadata":{"id":"0Pq8C86Bbt6B","execution":{"iopub.status.busy":"2023-06-25T10:18:59.784170Z","iopub.execute_input":"2023-06-25T10:18:59.786267Z","iopub.status.idle":"2023-06-25T10:18:59.798194Z","shell.execute_reply.started":"2023-06-25T10:18:59.786233Z","shell.execute_reply":"2023-06-25T10:18:59.797297Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport torch\nfrom torcheval.metrics.functional import multiclass_f1_score\nfrom transformers import BertTokenizer, BertForSequenceClassification\nfrom torch.utils.data import Dataset, DataLoader\nfrom transformers import AdamW, get_linear_schedule_with_warmup\nfrom tqdm.notebook import tqdm\nimport wandb\n\n\nclass BertClassifier(nn.Module):\n\n    def __init__(self, model_path, tokenizer_path, n_classes=5, epochs=1, model_save_path='/content/bert.pt'):\n        super(BertClassifier, self).__init__()\n        self.model = BertForSequenceClassification.from_pretrained(model_path)\n        self.tokenizer = BertTokenizer.from_pretrained(tokenizer_path)\n        self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n        self.model_save_path=model_save_path\n        self.max_len = 512\n        self.epochs = epochs\n        self.out_features = self.model.bert.encoder.layer[1].output.dense.out_features\n        self.model.classifier = torch.nn.Linear(self.out_features, n_classes)\n        self.model.to(self.device)\n\n    def preparation(self, X_train, y_train, X_valid, y_valid):\n        data = pd.concat([pd.Series(X_train), pd.Series(y_train)], axis=1, ignore_index=True).rename(columns={0: 'review', 1: 'rating_value'})\n        # create datasets\n        self.train_set = CustomDataset(X_train, y_train, self.tokenizer)\n        self.valid_set = CustomDataset(X_valid, y_valid, self.tokenizer)\n\n        # create data loaders\n        self.train_loader = DataLoader(self.train_set, batch_size=16, shuffle=True)\n        self.valid_loader = DataLoader(self.valid_set, batch_size=16, shuffle=True)\n\n        # helpers initialization\n        self.optimizer = AdamW(self.model.parameters(), lr=2e-5, correct_bias=False)\n        self.scheduler = get_linear_schedule_with_warmup(\n                self.optimizer,\n                num_warmup_steps=0,\n                num_training_steps=len(self.train_loader) * self.epochs\n            )\n        # с учетом дисбаланса классов\n#         weights = torch.tensor(list(data.groupby('rating_value').count().review.max() / data.groupby('rating_value').count().review))\n#         self.loss_fn = torch.nn.CrossEntropyLoss(weight=weights).to(self.device)\n        # без учета дисбаланса классов\n        self.loss_fn = torch.nn.CrossEntropyLoss().to(self.device)\n\n    def fit(self):\n        self.model = self.model.train()\n        losses = []\n        f1_micro_scores = []\n        f1_macro_scores = []\n        accuracy_scores = []\n        correct_predictions = 0\n\n        for step, data in enumerate(tqdm(self.train_loader)):\n            input_ids = data[\"input_ids\"].to(self.device)\n            attention_mask = data[\"attention_mask\"].to(self.device)\n            targets = data[\"targets\"].to(self.device)\n\n            outputs = self.model(\n                input_ids=input_ids,\n                attention_mask=attention_mask\n                )\n            preds = torch.argmax(outputs.logits, dim=1)\n\n            loss = self.loss_fn(outputs.logits, targets)\n\n            correct_predictions += torch.sum(preds == targets)\n            acc = torch.sum(preds == targets) / len(targets)\n            f1_micro = multiclass_f1_score(preds, targets, num_classes=5, average='micro')\n            f1_macro = multiclass_f1_score(preds, targets, num_classes=5, average='macro')\n\n            losses.append(loss.item())\n            f1_micro_scores.append(f1_micro)\n            f1_macro_scores.append(f1_macro)\n            accuracy_scores.append(acc)\n\n            if step % 10 == 0:\n              wandb.log({\n                  'loss': torch.mean(torch.tensor(losses[-10:], dtype=torch.float32)),\n                  'accuracy': torch.mean(torch.tensor(accuracy_scores[-10:], dtype=torch.float32)),\n                  'f1_micro': torch.mean(torch.tensor(f1_micro_scores[-10:], dtype=torch.float32)),\n                  'f1_macro': torch.mean(torch.tensor(f1_macro_scores[-10:], dtype=torch.float32))\n                  })\n\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.model.parameters(), max_norm=1.0)\n            self.optimizer.step()\n            self.scheduler.step()\n            self.optimizer.zero_grad()\n\n\n        train_acc = correct_predictions.double() / len(self.train_set)\n        train_loss = torch.mean(torch.tensor(losses, dtype=torch.float32))\n        return train_acc, train_loss\n\n    def eval(self):\n        self.model = self.model.eval()\n        losses = []\n        correct_predictions = 0\n\n        with torch.no_grad():\n            for data in tqdm(self.valid_loader):\n                input_ids = data[\"input_ids\"].to(self.device)\n                attention_mask = data[\"attention_mask\"].to(self.device)\n                targets = data[\"targets\"].to(self.device)\n\n                outputs = self.model(\n                    input_ids=input_ids,\n                    attention_mask=attention_mask\n                    )\n\n                preds = torch.argmax(outputs.logits, dim=1)\n                loss = self.loss_fn(outputs.logits, targets)\n                correct_predictions += torch.sum(preds == targets)\n                losses.append(loss.item())\n\n        val_acc = correct_predictions.double() / len(self.valid_set)\n        val_loss = np.mean(losses)\n        return val_acc, val_loss\n\n    def train(self):\n        best_accuracy = 0\n        for epoch in tqdm(range(self.epochs)):\n            print(f'Epoch {epoch + 1}/{self.epochs}')\n            train_acc, train_loss = self.fit()\n            wandb.log({'train_acc': train_acc})\n            print(f'Train loss {train_loss} accuracy {train_acc}')\n\n            val_acc, val_loss = self.eval()\n            wandb.log({'val_acc': val_acc})\n            print(f'Val loss {val_loss} accuracy {val_acc}')\n            print('-' * 10)\n\n            if val_acc > best_accuracy:\n                torch.save({\n                    'epoch': epoch,\n                    'model_state_dict': self.model.state_dict(),\n                    'optimizer_state_dict': self.optimizer.state_dict(),\n                    'loss': val_loss,\n                    'accuracy': val_acc,\n                    }, self.model_save_path)\n                best_accuracy = val_acc\n\n        state = torch.load(self.model_save_path)\n        # self.model = BertClassifier(self.model_path, self.tokenizer_path)\n        self.model.load_state_dict(state['model_state_dict'])\n        data = pd.DataFrame(config, index=[0])\n        data['accuracy'], data['loss'] =  state['accuracy'], state['loss'] #self.model['accuracy'], self.model['loss']\n        table = wandb.Table(data=data)\n        wandb.log({'config': table})\n\n\n        wandb.finish()\n\n    def predict(self, text):\n        encoding = self.tokenizer.encode_plus(\n            text,\n            add_special_tokens=True,\n            max_length=self.max_len,\n            return_token_type_ids=False,\n            truncation=True,\n            padding='max_length',\n            return_attention_mask=True,\n            return_tensors='pt',\n        )\n\n        out = {\n              'text': text,\n              'input_ids': encoding['input_ids'].flatten(),\n              'attention_mask': encoding['attention_mask'].flatten()\n          }\n\n        input_ids = out[\"input_ids\"].to(self.device)\n        attention_mask = out[\"attention_mask\"].to(self.device)\n\n        outputs = self.model(\n            input_ids=input_ids.unsqueeze(0),\n            attention_mask=attention_mask.unsqueeze(0)\n        )\n        prediction = outputs.logits.cpu().detach()\n\n        return prediction\n","metadata":{"id":"n7aTJeGcbzKd","execution":{"iopub.status.busy":"2023-06-25T10:19:13.252559Z","iopub.execute_input":"2023-06-25T10:19:13.255277Z","iopub.status.idle":"2023-06-25T10:19:13.358082Z","shell.execute_reply.started":"2023-06-25T10:19:13.255241Z","shell.execute_reply":"2023-06-25T10:19:13.356404Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# cointegrated/LaBSE-en-ru\n# cointegrated/rubert-tiny-sentiment-balanced\n# DeepPavlov/rubert-base-cased-conversational\n\n\nseed_everything(42)\n\nclassifier = BertClassifier(\n        model_path='cointegrated/LaBSE-en-ru',\n        tokenizer_path='cointegrated/LaBSE-en-ru',\n        n_classes=5,\n        epochs=3,\n        model_save_path='/kaggle/working/LaBSE_bert_best.pt'\n)","metadata":{"id":"mW7oNmnuHnrM","execution":{"iopub.status.busy":"2023-06-25T10:19:13.359405Z","iopub.execute_input":"2023-06-25T10:19:13.359892Z","iopub.status.idle":"2023-06-25T10:19:29.187981Z","shell.execute_reply.started":"2023-06-25T10:19:13.359828Z","shell.execute_reply":"2023-06-25T10:19:29.186983Z"},"trusted":true},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading (…)lve/main/config.json:   0%|          | 0.00/806 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3854d691baac49b5b6e14fa99d758c90"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading model.safetensors:   0%|          | 0.00/516M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6f652789994e42eebc54dd64cf6ea240"}},"metadata":{}},{"name":"stderr","text":"Some weights of the model checkpoint at cointegrated/LaBSE-en-ru were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.bias', 'cls.seq_relationship.weight']\n- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\nSome weights of BertForSequenceClassification were not initialized from the model checkpoint at cointegrated/LaBSE-en-ru and are newly initialized: ['classifier.weight', 'classifier.bias']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Downloading (…)solve/main/vocab.txt: 0.00B [00:00, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b99f06b6c56a45ac833aa24b82fc8e58"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading (…)cial_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f436482168be48508098130b8e951f2b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading (…)okenizer_config.json:   0%|          | 0.00/49.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f590cb2cb30a48deb360e54db88d6516"}},"metadata":{}}]},{"cell_type":"code","source":"classifier.preparation(\n        X_train=list(train_data['review']),\n        y_train=list(train_data['rating_value']),\n        X_valid=list(test_data['review']),\n        y_valid=list(test_data['rating_value'])\n    )","metadata":{"id":"ap3jdiB3H0Wv","colab":{"base_uri":"https://localhost:8080/"},"outputId":"09b5e960-9406-48b5-8180-9e58f2f31f4c","execution":{"iopub.status.busy":"2023-06-25T10:19:29.190102Z","iopub.execute_input":"2023-06-25T10:19:29.190806Z","iopub.status.idle":"2023-06-25T10:19:29.224411Z","shell.execute_reply.started":"2023-06-25T10:19:29.190753Z","shell.execute_reply":"2023-06-25T10:19:29.223519Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/optimization.py:411: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"%%time\nclassifier.train()","metadata":{"id":"mSF8mbDDH2Ob","colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["4ee2d8ab0b144552b20f8939195fa0bb","75b07fe9d7454d55b6356599736b5869","30a5190e12414f17bea7efa46d45afd4","1bd431a4d44446fb8589a69ce87c2b17","7dce9d76acce449e9b2ddd3224b4fa6b","69a4af58232e4596a7e782a6a7038771","df21d39a78dd4247b77b8c6f6bd8cc1b","a35c40a847244753a5a6de6c6e4fe6e8","29b47a6d54fd43e0bb020b0fa00fa26d","4c773d81362744e1b7a358a6a10aa85c","11e67af6bca247e1804947669a24a3a4","3b6e448523654430b56af8f12fe5a325","ee9b8f9684c14ec18ea917de9df29ae5","f1d77621eb854f5e9b95a0fb2b2eb76b","607dab97b70945319576f4a9b4a5035e","9183ef29621a4c77b1e6c320213f464e","9c698c4b197748f1996ed8508bd77e08","14bb72b8a3f941e38704136d6b91783c","338b387e7542479c8fc069c416767c7e","ff7501d9df514707aefaa65ebd6302b7","cc1d833d115744eaa7077c1685179d46","1262f734447d43ce85ac1405b5426440","a03555727b794a84adb3a5b07704dfb8","a2dc8e47b8f54a39b963945a2bf834f7","ccdab01e699d45c1bd6810228e94949a","c32e7dd119184efbb805234fabddff7d","bfcab00ef22347518b62072da8c8006a","0bade0a671214a9ea4a0a1daa6061e4b","165040e0d4364b6caf2f7af0c3a3683b","cb0160c6801440a4bfa3e607bd02845b","26ffb3b56e474d818ef8f38706f0120b","e707799ef6324ad1bf04f07a84b5c7fb","9d038fd98ad542e681b5267c0427f90e","200d0a99a0144778a1cc5b258e1664d6","f5ebc71ea724426aa5c72922fafddd45","3477a24a347e4e6fbbd5f3d0c8dc8665","46dcb6167d674379949960af017f33ed","de4f60c359b948ddb55a0821d2a56d17","36a671c29393418481477982913588c8","ecef023b6ab441c4aeeaee168973af3f","2754924fcff143da954bf12e279bf71a"]},"outputId":"c642a5f4-f6d1-43d5-8a00-9f2b7756841a","execution":{"iopub.status.busy":"2023-06-25T10:19:39.422325Z","iopub.execute_input":"2023-06-25T10:19:39.422679Z","iopub.status.idle":"2023-06-25T11:13:21.045771Z","shell.execute_reply.started":"2023-06-25T10:19:39.422651Z","shell.execute_reply":"2023-06-25T11:13:21.044833Z"},"trusted":true},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/3 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"dc454d148e8144afb9e3e83f0a230e36"}},"metadata":{}},{"name":"stdout","text":"Epoch 1/3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/620 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f83b10ba32064092828fa9a07ac661e6"}},"metadata":{}},{"name":"stdout","text":"Train loss 0.5931561589241028 accuracy 0.8287097750428729\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/155 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"892550c7260e4992a871b3cfd378b12a"}},"metadata":{}},{"name":"stdout","text":"Val loss 0.5420628666397064 accuracy 0.8398547801532876\n----------\nEpoch 2/3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/620 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d3b9c45516064dafa6a049f0fa0c4557"}},"metadata":{}},{"name":"stdout","text":"Train loss 0.48029235005378723 accuracy 0.851104610107939\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/155 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bf81722c88cc483e8b1d3ecd7d2911e6"}},"metadata":{}},{"name":"stdout","text":"Val loss 0.5468515420152295 accuracy 0.8317870108914884\n----------\nEpoch 3/3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/620 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"85cc70e18f0f43deafc5eac7fcf9d8d9"}},"metadata":{}},{"name":"stdout","text":"Train loss 0.40774065256118774 accuracy 0.8711792595581559\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/155 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cdd1dbd3aa4549229ad0fdd332a63603"}},"metadata":{}},{"name":"stdout","text":"Val loss 0.5782988348314839 accuracy 0.8217022993142395\n----------\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"VBox(children=(Label(value='0.002 MB of 0.003 MB uploaded (0.000 MB deduped)\\r'), FloatProgress(value=0.910628…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"165416b4b6594fae9543dd1be10d9aed"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<style>\n    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n    </style>\n<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>accuracy</td><td>▁▃▅▆▄▄▅▅▅▆▆▆▅▆▅▆▅▆▆▅▇▅▆▆▅▆▅▇▆▇▇█▆█▇▅▆▇▆▆</td></tr><tr><td>f1_macro</td><td>▂▁▄▅▃▂▄▅▅▅▅▄▄▄▄▄▃▅▅▄▆▅▅▆▄▅▃▆▇█▇█▆█▆▃▅▇▆▅</td></tr><tr><td>f1_micro</td><td>▁▃▅▆▄▄▅▅▅▆▆▆▅▆▅▆▅▆▆▅▇▅▆▆▅▆▅▇▆▇▇█▆█▇▅▆▇▆▆</td></tr><tr><td>loss</td><td>█▇▄▄▄▅▄▄▅▄▃▄▄▃▄▃▄▄▃▄▂▄▃▂▃▃▄▂▂▂▂▁▂▂▂▃▂▂▂▂</td></tr><tr><td>train_acc</td><td>▁▅█</td></tr><tr><td>val_acc</td><td>█▅▁</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>accuracy</td><td>0.86875</td></tr><tr><td>f1_macro</td><td>0.59352</td></tr><tr><td>f1_micro</td><td>0.86875</td></tr><tr><td>loss</td><td>0.35973</td></tr><tr><td>train_acc</td><td>0.87118</td></tr><tr><td>val_acc</td><td>0.8217</td></tr></table><br/></div></div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run <strong style=\"color:#cdcd00\">LaBSE_bert BEST</strong> at: <a href='https://wandb.ai/romjiik/course_work/runs/6kx5wlkl' target=\"_blank\">https://wandb.ai/romjiik/course_work/runs/6kx5wlkl</a><br/>Synced 6 W&B file(s), 1 media file(s), 1 artifact file(s) and 0 other file(s)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Find logs at: <code>./wandb/run-20230625_101828-6kx5wlkl/logs</code>"},"metadata":{}},{"name":"stdout","text":"CPU times: user 52min 59s, sys: 15 s, total: 53min 14s\nWall time: 53min 41s\n","output_type":"stream"}]},{"cell_type":"code","source":"texts = list(test_data['review'])\npredictions = [classifier.predict(t) for t in texts]","metadata":{"id":"tLQ_JJQeKw2P","execution":{"iopub.status.busy":"2023-06-25T11:13:21.047836Z","iopub.execute_input":"2023-06-25T11:13:21.048483Z","iopub.status.idle":"2023-06-25T11:14:58.789846Z","shell.execute_reply.started":"2023-06-25T11:13:21.048447Z","shell.execute_reply":"2023-06-25T11:14:58.788811Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"labels_true = test_data['rating_value']\nlabels_pred = torch.argmax(nn.functional.softmax(torch.cat(predictions,dim=0), dim=1), dim=1)","metadata":{"id":"i_Grho5xNldv","execution":{"iopub.status.busy":"2023-06-25T11:14:58.791312Z","iopub.execute_input":"2023-06-25T11:14:58.792152Z","iopub.status.idle":"2023-06-25T11:14:58.808750Z","shell.execute_reply.started":"2023-06-25T11:14:58.792118Z","shell.execute_reply":"2023-06-25T11:14:58.807755Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import precision_recall_fscore_support, accuracy_score\n\nprecision, recall, f1score = precision_recall_fscore_support(labels_true, labels_pred,average='micro')[:3]\n\nprint(f'MICRO AVERAGE: precision: {precision}, recall: {recall}, f1score: {f1score}')\n\nprecision, recall, f1score = precision_recall_fscore_support(labels_true, labels_pred,average='macro')[:3]\n\nprint(f'MACRO AVERAGE: precision: {precision}, recall: {recall}, f1score: {f1score}')\n","metadata":{"id":"veVDn1OqH4TR","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b3e30156-891e-4e5b-e048-4bfa6881f4bd","execution":{"iopub.status.busy":"2023-06-25T11:14:58.812208Z","iopub.execute_input":"2023-06-25T11:14:58.812553Z","iopub.status.idle":"2023-06-25T11:14:58.831023Z","shell.execute_reply.started":"2023-06-25T11:14:58.812518Z","shell.execute_reply":"2023-06-25T11:14:58.829981Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"MICRO AVERAGE: precision: 0.8398547801532876, recall: 0.8398547801532876, f1score: 0.8398547801532876\nMACRO AVERAGE: precision: 0.4395355461826938, recall: 0.3985151778365969, f1score: 0.37827742997740393\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import precision_recall_fscore_support, accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n\ncm = confusion_matrix(labels_true, labels_pred, labels=[0,1,2,3,4])\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=[0,1,2,3,4])\ndisp.plot()\nplt.show()\n","metadata":{"id":"Cav6vrfMleX0","execution":{"iopub.status.busy":"2023-06-25T11:14:58.834343Z","iopub.execute_input":"2023-06-25T11:14:58.835064Z","iopub.status.idle":"2023-06-25T11:14:59.193603Z","shell.execute_reply.started":"2023-06-25T11:14:58.835030Z","shell.execute_reply":"2023-06-25T11:14:59.192683Z"},"trusted":true},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# BEST GPT","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nfrom transformers import GPT2Model, GPT2Tokenizer, GPT2Config, GPT2ForSequenceClassification\n\n\nclass GPTClassifier(nn.Module):\n    def __init__(self, model_path, tokenizer_path, n_classes=5, max_len=512):\n        super(GPTClassifier, self).__init__()\n        self.max_len = max_len\n        self.gpt_config = GPT2Config.from_pretrained(model_path, num_labels=n_classes)\n        self.gpt_model = GPT2Model.from_pretrained(model_path, config=self.gpt_config)\n        self.tokenizer = GPT2Tokenizer.from_pretrained(tokenizer_path)\n        self.tokenizer.padding_side = \"left\"\n        if self.tokenizer.pad_token is None:\n            self.tokenizer.add_special_tokens({'pad_token': '[PAD]'})\n        self.gpt_model.resize_token_embeddings(len(self.tokenizer))\n        self.clf = nn.Linear(self.gpt_config.hidden_size, n_classes)\n\n\n    def forward(self, input_ids, attention_mask):\n        outputs = self.gpt_model(input_ids, attention_mask=attention_mask)\n        hidden_state = outputs.last_hidden_state\n        pooled_output = hidden_state[:, 0]\n        logits = self.clf(pooled_output)\n        return logits","metadata":{"execution":{"iopub.status.busy":"2023-06-25T11:14:59.194932Z","iopub.execute_input":"2023-06-25T11:14:59.195525Z","iopub.status.idle":"2023-06-25T11:14:59.249248Z","shell.execute_reply.started":"2023-06-25T11:14:59.195491Z","shell.execute_reply":"2023-06-25T11:14:59.248302Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"class Trainer:\n    def __init__(self, model, epochs=1, batch_size=16, model_save_path='/content/bert.pt'):\n        self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n        self.model = model.to(self.device)\n        self.tokenizer = self.model.tokenizer\n        self.max_len = self.model.max_len\n        self.epochs = epochs\n        self.batch_size = batch_size\n        self.model_save_path = model_save_path\n\n    def preparation(self, X_train, y_train, X_valid, y_valid):\n        data = pd.concat([pd.Series(X_train), pd.Series(y_train)], axis=1, ignore_index=True).rename(columns={0: 'review', 1: 'rating_value'})\n        # create datasets\n        self.train_set = CustomDataset(X_train, y_train, self.tokenizer)\n        self.valid_set = CustomDataset(X_valid, y_valid, self.tokenizer)\n\n        # create data loaders\n        self.train_loader = DataLoader(self.train_set, batch_size=self.batch_size, shuffle=True)\n        self.valid_loader = DataLoader(self.valid_set, batch_size=self.batch_size, shuffle=True)\n\n        # helpers initialization\n        self.optimizer = AdamW(self.model.parameters(), lr=2e-5, correct_bias=False)\n        self.scheduler = get_linear_schedule_with_warmup(\n                self.optimizer,\n                num_warmup_steps=0,\n                num_training_steps=len(self.train_loader) * self.epochs\n            )\n        # c учетом дисбаланса\n        weights = torch.tensor(list(data.groupby('rating_value').count().review.max() / data.groupby('rating_value').count().review))\n        self.loss_fn = torch.nn.CrossEntropyLoss(weight=weights).to(self.device)\n        # без учета дисбаланса\n#         self.loss_fn = torch.nn.CrossEntropyLoss().to(self.device)\n\n    def fit(self):\n        self.model = self.model.train()\n        losses = []\n        f1_micro_scores = []\n        f1_macro_scores = []\n        accuracy_scores = []\n        correct_predictions = 0\n\n        for step, data in enumerate(tqdm(self.train_loader)):\n            input_ids = data[\"input_ids\"].to(self.device)\n            attention_mask = data[\"attention_mask\"].to(self.device)\n            targets = data[\"targets\"].to(self.device)\n            # print(input_ids.shape, targets.shape)\n            outputs = self.model(\n                input_ids=input_ids,\n                attention_mask=attention_mask\n                )\n            preds = torch.argmax(outputs, dim=1)\n\n            loss = self.loss_fn(outputs, targets)\n\n            correct_predictions += torch.sum(preds == targets)\n            acc = torch.sum(preds == targets) / len(targets)\n            f1_micro = multiclass_f1_score(preds, targets, num_classes=5, average='micro')\n            f1_macro = multiclass_f1_score(preds, targets, num_classes=5, average='macro')\n\n            losses.append(loss.item())\n            f1_micro_scores.append(f1_micro)\n            f1_macro_scores.append(f1_macro)\n            accuracy_scores.append(acc)\n\n            if step % 10 == 0:\n              wandb.log({\n                  'loss': torch.mean(torch.tensor(losses[-10:], dtype=torch.float32)),\n                  'accuracy': torch.mean(torch.tensor(accuracy_scores[-10:], dtype=torch.float32)),\n                  'f1_micro': torch.mean(torch.tensor(f1_micro_scores[-10:], dtype=torch.float32)),\n                  'f1_macro': torch.mean(torch.tensor(f1_macro_scores[-10:], dtype=torch.float32))\n                  })\n\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.model.parameters(), max_norm=1.0)\n            self.optimizer.step()\n            self.scheduler.step()\n            self.optimizer.zero_grad()\n\n\n        train_acc = correct_predictions.double() / len(self.train_set)\n        train_loss = torch.mean(torch.tensor(losses, dtype=torch.float32))\n        return train_acc, train_loss\n\n    def eval(self):\n        self.model = self.model.eval()\n        losses = []\n        correct_predictions = 0\n\n        with torch.no_grad():\n            for data in tqdm(self.valid_loader):\n                input_ids = data[\"input_ids\"].to(self.device)\n                attention_mask = data[\"attention_mask\"].to(self.device)\n                targets = data[\"targets\"].to(self.device)\n\n                outputs = self.model(\n                    input_ids=input_ids,\n                    attention_mask=attention_mask\n                    )\n\n                preds = torch.argmax(outputs, dim=1)\n                loss = self.loss_fn(outputs, targets)\n                correct_predictions += torch.sum(preds == targets)\n                losses.append(loss.item())\n\n        val_acc = correct_predictions.double() / len(self.valid_set)\n        val_loss = np.mean(losses)\n        return val_acc, val_loss\n\n    def train(self):\n        best_accuracy = 0\n        for epoch in tqdm(range(self.epochs)):\n            # print(f'Epoch {epoch + 1}/{self.epochs}')\n            train_acc, train_loss = self.fit()\n            wandb.log({'train_acc': train_acc})\n            # print(f'Train loss {train_loss} accuracy {train_acc}')\n\n            val_acc, val_loss = self.eval()\n            wandb.log({'val_acc': val_acc})\n            # print(f'Val loss {val_loss} accuracy {val_acc}')\n            # print('-' * 10)\n\n            if val_acc > best_accuracy:\n                torch.save({\n                    'epoch': epoch,\n                    'model_state_dict': self.model.state_dict(),\n                    'optimizer_state_dict': self.optimizer.state_dict(),\n                    'loss': val_loss,\n                    'accuracy': val_acc,\n                    }, self.model_save_path)\n                best_accuracy = val_acc\n\n        state = torch.load(self.model_save_path)\n        self.model.load_state_dict(state['model_state_dict'])\n        data = pd.DataFrame(config, index=[0])\n        data['accuracy'], data['loss'] =  state['accuracy'], state['loss']\n        table = wandb.Table(data=data)\n        wandb.log({'config': table})\n\n        wandb.finish()\n\n    def predict(self, text):\n        encoding = self.tokenizer.encode_plus(\n            text,\n            add_special_tokens=True,\n            max_length=self.max_len,\n            return_token_type_ids=False,\n            truncation=True,\n            padding='max_length',\n            return_attention_mask=True,\n            return_tensors='pt',\n        )\n\n        out = {\n              'text': text,\n              'input_ids': encoding['input_ids'].flatten(),\n              'attention_mask': encoding['attention_mask'].flatten()\n          }\n\n        input_ids = out[\"input_ids\"].to(self.device)\n        attention_mask = out[\"attention_mask\"].to(self.device)\n\n        outputs = self.model(\n            input_ids=input_ids.unsqueeze(0),\n            attention_mask=attention_mask.unsqueeze(0)\n        )\n        prediction = outputs.cpu().detach()\n\n        return prediction","metadata":{"execution":{"iopub.status.busy":"2023-06-25T11:14:59.250604Z","iopub.execute_input":"2023-06-25T11:14:59.251403Z","iopub.status.idle":"2023-06-25T11:14:59.283163Z","shell.execute_reply.started":"2023-06-25T11:14:59.251370Z","shell.execute_reply":"2023-06-25T11:14:59.282206Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"import wandb\nwandb.login()\n\n# ai-forever/rugpt3small_based_on_gpt2\nconfig={\n      \"learning_rate\": 2e-5,\n      \"architecture\": \"ai-forever/rugpt3small_based_on_gpt2\",\n      \"weight_balance\": True,\n      \"dataset\": \"Bank_review_dataset\",\n      \"epochs\": 3,\n      \"batch_size\": 8,\n}\n\nwandb.init(\n    # Set the project where this run will be logged\n    project=\"course_work\",\n    # We pass a run name (otherwise it’ll be randomly assigned, like sunshine-lollypop-10)\n    name=f\"GPT3 BEST\",\n    # Track hyperparameters and run metadata\n    config=config)","metadata":{"execution":{"iopub.status.busy":"2023-06-25T11:14:59.284628Z","iopub.execute_input":"2023-06-25T11:14:59.284985Z","iopub.status.idle":"2023-06-25T11:15:30.141629Z","shell.execute_reply.started":"2023-06-25T11:14:59.284952Z","shell.execute_reply":"2023-06-25T11:15:30.140818Z"},"trusted":true},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.15.4"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20230625_111459-lq42uq19</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/romjiik/course_work/runs/lq42uq19' target=\"_blank\">GPT3 BEST</a></strong> to <a href='https://wandb.ai/romjiik/course_work' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/romjiik/course_work' target=\"_blank\">https://wandb.ai/romjiik/course_work</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/romjiik/course_work/runs/lq42uq19' target=\"_blank\">https://wandb.ai/romjiik/course_work/runs/lq42uq19</a>"},"metadata":{}},{"execution_count":24,"output_type":"execute_result","data":{"text/html":"<button onClick=\"this.nextSibling.style.display='block';this.style.display='none';\">Display W&B run</button><iframe src='https://wandb.ai/romjiik/course_work/runs/lq42uq19?jupyter=true' style='border:none;width:100%;height:420px;display:none;'></iframe>","text/plain":"<wandb.sdk.wandb_run.Run at 0x7d4ffa713d00>"},"metadata":{}}]},{"cell_type":"code","source":"seed_everything(42)\n\nclassifier = GPTClassifier(\n        model_path='ai-forever/rugpt3small_based_on_gpt2',\n        tokenizer_path='ai-forever/rugpt3small_based_on_gpt2'\n)\n\ntrainer = Trainer(\n        model=classifier,\n        epochs=config['epochs'],\n        batch_size=config['batch_size'],\n#         model_save_path='/content/drive/MyDrive/Colab Notebooks/course_work/models/gpt3_e1_b16.pt'\n        model_save_path = '/kaggle/working/gpt3_e3_b8_best.pt'\n)","metadata":{"execution":{"iopub.status.busy":"2023-06-25T11:15:30.145481Z","iopub.execute_input":"2023-06-25T11:15:30.147966Z","iopub.status.idle":"2023-06-25T11:15:57.762378Z","shell.execute_reply.started":"2023-06-25T11:15:30.147931Z","shell.execute_reply":"2023-06-25T11:15:57.761283Z"},"trusted":true},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading (…)lve/main/config.json:   0%|          | 0.00/608 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7a0ea17fd9fb4b7a8c8d3a57d6b709ec"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading pytorch_model.bin:   0%|          | 0.00/551M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"20c21c81beda4a59995899889539950b"}},"metadata":{}},{"name":"stderr","text":"Some weights of the model checkpoint at ai-forever/rugpt3small_based_on_gpt2 were not used when initializing GPT2Model: ['lm_head.weight']\n- This IS expected if you are initializing GPT2Model from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing GPT2Model from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Downloading (…)olve/main/vocab.json: 0.00B [00:00, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"62423518a0a3426e8ca7e081ab033337"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading (…)olve/main/merges.txt: 0.00B [00:00, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e58533b2845b40dba453fe04034903ad"}},"metadata":{}},{"name":"stderr","text":"Using pad_token, but it is not set yet.\n","output_type":"stream"}]},{"cell_type":"code","source":"trainer.preparation(\n        X_train=list(train_data['review']),\n        y_train=list(train_data['rating_value']),\n        X_valid=list(test_data['review']),\n        y_valid=list(test_data['rating_value'])\n    )","metadata":{"execution":{"iopub.status.busy":"2023-06-25T11:15:57.765971Z","iopub.execute_input":"2023-06-25T11:15:57.766812Z","iopub.status.idle":"2023-06-25T11:15:57.814753Z","shell.execute_reply.started":"2023-06-25T11:15:57.766753Z","shell.execute_reply":"2023-06-25T11:15:57.813692Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/optimization.py:411: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"%%time\ntrainer.train()","metadata":{"execution":{"iopub.status.busy":"2023-06-25T11:15:57.819484Z","iopub.execute_input":"2023-06-25T11:15:57.822168Z","iopub.status.idle":"2023-06-25T12:14:25.567051Z","shell.execute_reply.started":"2023-06-25T11:15:57.822125Z","shell.execute_reply":"2023-06-25T12:14:25.566057Z"},"trusted":true},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/3 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"25efd273e722472aaa800b707b2541be"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/1240 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2a2ec4876ffd4441938a434f71c6b9cd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/310 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4d9df0808f3d440394b7a608bac06d92"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/1240 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2b08d01db5b74732a5616740e391d10a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/310 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5debc1eabd8548b6801ecd5a73b18894"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/1240 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6e377bada09c41a482e5bfe61f760f5d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/310 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f6cdd0416df548d08c8d087626bb3116"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"VBox(children=(Label(value='0.003 MB of 0.003 MB uploaded (0.000 MB deduped)\\r'), FloatProgress(value=1.0, max…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"093b1ff1394a44e48c6c5a1605bd6b81"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<style>\n    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n    </style>\n<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>accuracy</td><td>▁▇▇▆▆▆▆▃▆▇▅▇▇█▇▇▆▇▇▇▇▇▇▇▇▇▆▇▇▇▆█▇▇███▇██</td></tr><tr><td>f1_macro</td><td>▁▆▆▆▅▆▅▃▅▇▄▆▇▇▆▇▆▆▇▇▆▆▇▇▆▇▅▆▆▆▆█▆▆▇▇▇▆█▇</td></tr><tr><td>f1_micro</td><td>▁▇▇▆▆▆▆▃▆▇▅▇▇█▇▇▆▇▇▇▇▇▇▇▇▇▆▇▇▇▆█▇▇███▇██</td></tr><tr><td>loss</td><td>█▆▆▅▆▅▅▆▆▄▅▄▇▃▃▆▃▃▄▂▅█▃▄▃▄▇▅▃▃▄▁▄▃▂▁▃▆▃▂</td></tr><tr><td>train_acc</td><td>▁██</td></tr><tr><td>val_acc</td><td>█▁▇</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>accuracy</td><td>0.8875</td></tr><tr><td>f1_macro</td><td>0.6972</td></tr><tr><td>f1_micro</td><td>0.8875</td></tr><tr><td>loss</td><td>0.72676</td></tr><tr><td>train_acc</td><td>0.80087</td></tr><tr><td>val_acc</td><td>0.80113</td></tr></table><br/></div></div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run <strong style=\"color:#cdcd00\">GPT3 BEST</strong> at: <a href='https://wandb.ai/romjiik/course_work/runs/lq42uq19' target=\"_blank\">https://wandb.ai/romjiik/course_work/runs/lq42uq19</a><br/>Synced 6 W&B file(s), 1 media file(s), 1 artifact file(s) and 0 other file(s)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Find logs at: <code>./wandb/run-20230625_111459-lq42uq19/logs</code>"},"metadata":{}},{"name":"stdout","text":"CPU times: user 57min 55s, sys: 16.8 s, total: 58min 11s\nWall time: 58min 27s\n","output_type":"stream"}]},{"cell_type":"code","source":"texts = list(valid['review'])\npredictions = [trainer.predict(t) for t in texts]\n","metadata":{"execution":{"iopub.status.busy":"2023-06-25T12:14:25.568373Z","iopub.execute_input":"2023-06-25T12:14:25.568757Z","iopub.status.idle":"2023-06-25T12:15:44.619420Z","shell.execute_reply.started":"2023-06-25T12:14:25.568706Z","shell.execute_reply":"2023-06-25T12:15:44.618464Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"labels_true = valid['rating_value']\nlabels_pred = torch.argmax(nn.functional.softmax(torch.cat(predictions,dim=0), dim=1), dim=1)","metadata":{"execution":{"iopub.status.busy":"2023-06-25T12:15:44.621911Z","iopub.execute_input":"2023-06-25T12:15:44.622291Z","iopub.status.idle":"2023-06-25T12:15:44.628508Z","shell.execute_reply.started":"2023-06-25T12:15:44.622256Z","shell.execute_reply":"2023-06-25T12:15:44.627231Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"rom sklearn.metrics import precision_recall_fscore_support, accuracy_score\n\nprecision, recall, f1score = precision_recall_fscore_support(labels_true, labels_pred,average='micro')[:3]\n\nprint(f'MICRO AVERAGE: precision: {precision}, recall: {recall}, f1score: {f1score}')\n\nprecision, recall, f1score = precision_recall_fscore_support(labels_true, labels_pred,average='macro')[:3]\n\nprint(f'MACRO AVERAGE: precision: {precision}, recall: {recall}, f1score: {f1score}')","metadata":{"execution":{"iopub.status.busy":"2023-06-25T12:15:44.630115Z","iopub.execute_input":"2023-06-25T12:15:44.630514Z","iopub.status.idle":"2023-06-25T12:15:44.643341Z","shell.execute_reply.started":"2023-06-25T12:15:44.630481Z","shell.execute_reply":"2023-06-25T12:15:44.642203Z"},"trusted":true},"execution_count":30,"outputs":[{"traceback":["\u001b[0;36m  Cell \u001b[0;32mIn[30], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    rom sklearn.metrics import precision_recall_fscore_support, accuracy_score\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"],"ename":"SyntaxError","evalue":"invalid syntax (476421122.py, line 1)","output_type":"error"}]},{"cell_type":"code","source":"from sklearn.metrics import precision_recall_fscore_support, accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n\ncm = confusion_matrix(labels_true, labels_pred, labels=[0,1,2,3,4])\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=[0,1,2,3,4])\ndisp.plot()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-06-25T12:15:44.644609Z","iopub.status.idle":"2023-06-25T12:15:44.645392Z","shell.execute_reply.started":"2023-06-25T12:15:44.645089Z","shell.execute_reply":"2023-06-25T12:15:44.645113Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}